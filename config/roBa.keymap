#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <20>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Main {
            bindings = <
&lt_to_layer_0 7 Q  &kp W         &kp E         &kp R                        &kp T                                                        &kp Y                   &kp U  &kp I      &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D         &kp F                        &kp G             &kp S                       &kp MINUS      &kp H                   &kp J  &kp K      &kp L    &mt RIGHT_CONTROL DELETE
&mt LEFT_SHIFT Z    &kp X         &kp C         &kp V                        &kp B             &kp TAB                     &kp LA(SPACE)  &kp N                   &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LG(ESCAPE)      &kp LEFT_ALT  &kp LEFT_GUI  &lt_to_layer_0 1 LANGUAGE_2  &lt 2 LANGUAGE_1  &lt_to_layer_0 3 SPACE      &kp BACKSPACE  &lt_to_layer_0 4 ENTER                             &mkp LCLK
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        Symbol {
            bindings = <
&kp SLASH        &kp ASTERISK  &kp MINUS      &kp PLUS      &kp EQUAL                        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN  &kp GREATER_THAN   &trans
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOLLAR    &kp PERCENT  &trans      &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SEMICOLON  &kp APOSTROPHE     &kp BACKSLASH
&trans           &kp CARET     &kp AMPERSAND  &kp QUESTION  &kp INT_YEN  &trans      &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp COLON      &kp DOUBLE_QUOTES  &kp PIPE
&trans           &trans        &trans         &trans        &trans       &trans      &trans  &trans                                                                         &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &kp ESCAPE  &kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp HOME    &kp LEFT         &kp DOWN_ARROW  &kp RIGHT    &kp END
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans      &trans           &trans          &trans       &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                    &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        Other {
            bindings = <
&trans      &kp LC(LG(LEFT_ARROW))  &kp LC(LG(UP_ARROW))  &kp LC(LG(RIGHT))  &trans                         &trans  &trans              &kp LC(UP_ARROW)    &trans         &trans
&kp K_COPY  &kp K_PASTE             &kp LS(LG(V))         &kp LC(LG(V))      &kp K_CUT  &trans      &trans  &trans  &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT)  &trans
&trans      &trans                  &trans                &kp LS(LG(N5))     &trans     &trans      &trans  &trans  &trans              &trans              &trans         &trans
&trans      &trans                  &trans                &trans             &trans     &trans      &trans  &trans                                                         &trans
            >;
        };

        Number+Fn {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5                                  &kp PERIOD  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans         &kp UNDERSCORE  &kp COMMA   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &kp GLOBE      &kp EQUAL       &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ASTERISK
&trans   &trans   &trans   &trans   &trans   &trans         &trans          &trans                                                &kp SLASH
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Bluetooth {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
